"""
Demonstration of the new Request constructor pattern in FastASGI.

This example shows how the Request class now has a unified constructor that takes
ASGI scope and receive callable directly, eliminating the need for factory methods.
"""

import asyncio
from fastasgi.request import Request


async def demo_new_request_pattern():
    """Demonstrate the new Request constructor pattern."""

    # Create ASGI scope
    scope = {
        "type": "http",
        "method": "POST",
        "path": "/api/users",
        "query_string": b"format=json&debug=true",
        "headers": [
            [b"content-type", b"application/json"],
            [b"authorization", b"Bearer token123"],
        ],
    }

    # Mock receive callable that returns JSON data
    json_body = b'{"name": "John", "age": 30}'

    async def mock_receive():
        return {"type": "http.request", "body": json_body, "more_body": False}

    print("=== New Request Constructor Pattern ===")

    # Create Request using the unified constructor
    request = Request(scope, mock_receive)
    print(f"✓ Request created: {request}")
    print(f"  Method: {request.method}")
    print(f"  Path: {request.path}")
    print(f"  Query params: {request.query_params}")
    print(
        f"  Headers: {dict(list(request.headers.items())[:2])}..."
    )  # Show first 2 headers

    # Load the body asynchronously
    print("\n--- Loading body asynchronously ---")
    await request.load_body()
    print(f"✓ Body loaded: {len(request.body())} bytes")
    print(f"  Body content: {request.text()}")
    print(f"  JSON data: {request.json()}")

    print("\n=== Testing with Multipart Data ===")

    # Test with multipart form data
    multipart_scope = {
        "type": "http",
        "method": "POST",
        "path": "/upload",
        "headers": [
            [b"content-type", b"multipart/form-data; boundary=----formdata123"],
        ],
    }

    # Simple multipart body (this would normally be generated by a client)
    multipart_body = (
        b"------formdata123\r\n"
        b'Content-Disposition: form-data; name="username"\r\n'
        b"\r\n"
        b"testuser\r\n"
        b"------formdata123\r\n"
        b'Content-Disposition: form-data; name="file"; filename="test.txt"\r\n'
        b"Content-Type: text/plain\r\n"
        b"\r\n"
        b"Hello World!\r\n"
        b"------formdata123--\r\n"
    )

    async def mock_multipart_receive():
        return {"type": "http.request", "body": multipart_body, "more_body": False}

    multipart_request = Request(multipart_scope, mock_multipart_receive)
    await multipart_request.load_body()

    print(f"✓ Multipart request processed")
    print(f"  Form fields: {multipart_request.form}")
    print(f"  Files: {len(multipart_request.files)} file(s)")
    if multipart_request.files:
        print(
            f"    - {multipart_request.files[0].filename} ({multipart_request.files[0].size} bytes)"
        )

    print("\n=== Benefits of New Pattern ===")
    print("✓ Unified constructor - one way to create Request objects")
    print("✓ Explicit async body loading with request.load_body()")
    print("✓ Works identically for regular and multipart requests")
    print("✓ Better testability with mock receive callables")
    print("✓ More intuitive and Pythonic API")
    print("✓ Compatibility maintained via from_bytes() for existing tests")


async def demo_compatibility_pattern():
    """Show the compatibility pattern for tests."""
    print("\n=== Compatibility Pattern for Tests ===")

    scope = {
        "type": "http",
        "method": "GET",
        "path": "/test",
        "headers": [],
    }

    # For tests, the new from_asgi() method should be used
    async def mock_receive():
        return {"type": "http.request", "body": b'{"test": "data"}', "more_body": False}

    request = await Request.from_asgi(scope, mock_receive)
    print(f"✓ from_asgi() method works: {request}")
    print(f"  Body immediately available: {request.text()}")
    print("  (Using the new standardized pattern)")


if __name__ == "__main__":
    asyncio.run(demo_new_request_pattern())
    asyncio.run(demo_compatibility_pattern())
